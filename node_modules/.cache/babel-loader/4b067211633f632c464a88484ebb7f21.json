{"ast":null,"code":"import languageReducer from './language/languageReducer';\nimport recommendProductsReducer from \"./recommendProducts/recommendProductsReducer\";\nimport { actionLog } from \"./middlewares/actionLog\";\nimport { ProductDetailSlice } from './productDetail/slice';\nimport { ProductSearchSlice } from \"./productSearch/slice\";\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { UserSlice } from './user/slice';\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { ShoppingCartSlice } from './shoppingCart/slice';\nimport { PlaceOrderSlice } from './order/slice';\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\"user\"]\n};\nconst rootReducer = combineReducers({\n  language: languageReducer,\n  recommendProducts: recommendProductsReducer,\n  productDetail: ProductDetailSlice.reducer,\n  productSearch: ProductSearchSlice.reducer,\n  user: UserSlice.reducer,\n  shoppingCart: ShoppingCartSlice.reducer,\n  order: PlaceOrderSlice.reducer\n});\nconst persistedReducer = persistReducer(persistConfig, rootReducer); //const store = createStore(rootReducer, applyMiddleware(thunk,actionLog));\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: getDefaultMiddleware => [...getDefaultMiddleware(), actionLog],\n  devTools: true\n});\nconst persistor = persistStore(store);\nexport default {\n  store,\n  persistor\n};","map":{"version":3,"sources":["/Users/melony/Desktop/react-travel/src/redux/store.ts"],"names":["languageReducer","recommendProductsReducer","actionLog","ProductDetailSlice","ProductSearchSlice","combineReducers","configureStore","UserSlice","persistStore","persistReducer","storage","ShoppingCartSlice","PlaceOrderSlice","persistConfig","key","whitelist","rootReducer","language","recommendProducts","productDetail","reducer","productSearch","user","shoppingCart","order","persistedReducer","store","middleware","getDefaultMiddleware","devTools","persistor"],"mappings":"AACA,OAAOA,eAAP,MAA6B,4BAA7B;AACA,OAAOC,wBAAP,MAAqC,8CAArC;AAEA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AACA,SAASC,eAAT,EAA0BC,cAA1B,QAAgD,kBAAhD;AACA,SAASC,SAAT,QAA0B,cAA1B;AAEA,SAASC,YAAT,EAAuBC,cAAvB,QAA6C,eAA7C;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,iBAAT,QAA8F,sBAA9F;AACA,SAAQC,eAAR,QAA8B,eAA9B;AACA,MAAMC,aAAa,GAAE;AACjBC,EAAAA,GAAG,EAAE,MADY;AAEjBJ,EAAAA,OAFiB;AAGjBK,EAAAA,SAAS,EAAE,CAAC,MAAD;AAHM,CAArB;AAMA,MAAMC,WAAW,GAAGX,eAAe,CAAC;AAChCY,EAAAA,QAAQ,EAACjB,eADuB;AAEhCkB,EAAAA,iBAAiB,EAAEjB,wBAFa;AAGhCkB,EAAAA,aAAa,EAAEhB,kBAAkB,CAACiB,OAHF;AAIhCC,EAAAA,aAAa,EAAEjB,kBAAkB,CAACgB,OAJF;AAKhCE,EAAAA,IAAI,EAAEf,SAAS,CAACa,OALgB;AAMhCG,EAAAA,YAAY,EAAEZ,iBAAiB,CAACS,OANA;AAOhCI,EAAAA,KAAK,EAAEZ,eAAe,CAACQ;AAPS,CAAD,CAAnC;AAUA,MAAMK,gBAAgB,GAAGhB,cAAc,CAACI,aAAD,EAAeG,WAAf,CAAvC,C,CACA;;AACA,MAAMU,KAAK,GAAEpB,cAAc,CAAC;AACxBc,EAAAA,OAAO,EAAEK,gBADe;AAExBE,EAAAA,UAAU,EAAGC,oBAAD,IACR,CAAC,GAAGA,oBAAoB,EAAxB,EAA2B1B,SAA3B,CAHoB;AAKxB2B,EAAAA,QAAQ,EAAC;AALe,CAAD,CAA3B;AAQA,MAAMC,SAAS,GAAGtB,YAAY,CAACkB,KAAD,CAA9B;AAEA,eAAe;AAACA,EAAAA,KAAD;AAAQI,EAAAA;AAAR,CAAf","sourcesContent":["import { createStore, applyMiddleware } from \"redux\";\nimport languageReducer from  './language/languageReducer';\nimport recommendProductsReducer from \"./recommendProducts/recommendProductsReducer\";\nimport thunk from 'redux-thunk';\nimport { actionLog } from \"./middlewares/actionLog\";\nimport { ProductDetailSlice } from './productDetail/slice';\nimport { ProductSearchSlice } from \"./productSearch/slice\";\nimport { combineReducers, configureStore } from '@reduxjs/toolkit';\nimport { UserSlice } from './user/slice'\nimport { useDispatch } from \"react-redux\";\nimport { persistStore, persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { ShoppingCartSlice, getShoppingCart, addShoppingCartItem, clearShoppingCartItem} from './shoppingCart/slice';\nimport {PlaceOrderSlice} from './order/slice';\nconst persistConfig ={\n    key: \"root\",\n    storage,\n    whitelist: [\"user\"]\n\n}\nconst rootReducer = combineReducers({\n    language:languageReducer,\n    recommendProducts: recommendProductsReducer,\n    productDetail: ProductDetailSlice.reducer,\n    productSearch: ProductSearchSlice.reducer,\n    user: UserSlice.reducer,\n    shoppingCart: ShoppingCartSlice.reducer,\n    order: PlaceOrderSlice.reducer\n});\n\nconst persistedReducer = persistReducer(persistConfig,rootReducer);\n//const store = createStore(rootReducer, applyMiddleware(thunk,actionLog));\nconst store= configureStore({\n    reducer: persistedReducer,\n    middleware: (getDefaultMiddleware) => \n        [...getDefaultMiddleware(),actionLog]\n    ,\n    devTools:true\n})\n\nconst persistor = persistStore(store);\nexport type RootState = ReturnType <typeof store.getState>\nexport default {store, persistor} ;"]},"metadata":{},"sourceType":"module"}